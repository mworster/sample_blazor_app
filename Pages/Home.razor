@page "/stockprice"
@inject StockInfoService StockPriceService
@inject StockReader.Services.UserService userService
@inject AuthorizationService authService
@using StockReader.Models

<PageTitle>Stock Price Finder</PageTitle>
@if (authService.IsLoggedIn == true)
{

    <h3 style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif; color:#656FB4;">What can you earn?</h3>

    <div>
        <input placeholder="Enter Stock Symbol..." class="inpt-box" id="symbol" @bind="symbol" />
        <button class="btn-gradent" @onclick="GetStockPrice">Get Price</button>
    </div>

    @if (stockPrice > 0)
    {
        <p>Stock name: @stockName </p>
        <p>Stock Price: @stockInfo.OpenPrice</p>
    }
    else if (priceError)
    {
        <p style="color: red;">Error fetching stock price. Please check the symbol and try again.</p>
    }
}
else
{
        <p style="color: red;">You must <NavLink href="/login">login</NavLink> before using the Stock tool.</p>        
}

@code {
    private string symbol = string.Empty;
    private decimal stockPrice;
    private bool priceError = false;
    private StockInfo stockInfo = new StockInfo();
    private string stockName = string.Empty;

    private async Task GetStockPrice()
    {
        if (string.IsNullOrEmpty(symbol))
        {
            return;
        }

        priceError = false;

        try
        {
            stockInfo = await StockPriceService.GetStockInfo(symbol.ToUpper());
            stockName = await StockPriceService.GetCompanyNameAsync(symbol.ToUpper());
            if (stockName == null || stockInfo == null)
            {
                priceError = true;
            }
        }
        catch
        {
            priceError = true;
        }
    }
}